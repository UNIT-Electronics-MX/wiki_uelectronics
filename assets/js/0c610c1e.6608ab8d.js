"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9978],{5148:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Code/tft_st7789v","title":"TFT ST7789V - MicroPython Library Documentation","description":"This documentation provides a unified guide for the TFT ST7789V MicroPython library, which enables seamless integration with the TFT Display ST7789V. The display, available in 2.4\\" and 2.8\\" variants, features a 240\xd7320 RGB screen and uses SPI for communication. This guide covers library overview, technical features, hardware details, recommended setup, and an example code demonstration.","source":"@site/docs/Code/tft_st7789v.md","sourceDirName":"Code","slug":"/Code/tft_st7789v","permalink":"/wiki_uelectronics/docs/Code/tft_st7789v","draft":false,"unlisted":false,"editUrl":"https://github.com/UNIT-Electronics/docs/Code/tft_st7789v.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Micropython Compatibility Guide","permalink":"/wiki_uelectronics/docs/Code/Compatibility_Arduino_upython/upython"},"next":{"title":"RS485 Soil Sensor Library","permalink":"/wiki_uelectronics/docs/Code/npk"}}');var o=i(4848),r=i(8453);const a={sidebar_position:1},s="TFT ST7789V - MicroPython Library Documentation",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Technical Features",id:"technical-features",level:2},{value:"Hardware and Software Details",id:"hardware-and-software-details",level:2},{value:"Hardware Requirements",id:"hardware-requirements",level:3},{value:"Initialization and Calibration",id:"initialization-and-calibration",level:3},{value:"Example Code",id:"example-code",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"tft-st7789v---micropython-library-documentation",children:"TFT ST7789V - MicroPython Library Documentation"})}),"\n",(0,o.jsx)(t.p,{children:'This documentation provides a unified guide for the TFT ST7789V MicroPython library, which enables seamless integration with the TFT Display ST7789V. The display, available in 2.4" and 2.8" variants, features a 240\xd7320 RGB screen and uses SPI for communication. This guide covers library overview, technical features, hardware details, recommended setup, and an example code demonstration.'}),"\n",(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(t.p,{children:["MicroPython-ST7789V_TFT is designed to offer robust control over text and image rendering on the TFT ST7789V display. The library builds on concepts from ",(0,o.jsx)(t.a,{href:"https://github.com/rdagger/micropython-ili9341",title:"rdagger",children:"rdagger"})," while adding support for ST7789V-specific color calibration, rotation options, and performance optimizations ideal for microcontrollers with limited resources."]}),"\n",(0,o.jsx)("div",{style:{textAlign:"center"},children:(0,o.jsx)("img",{src:"https://uelectronics.com/wp-content/uploads/2024/01/AR3950-Modulo-TFT-Display-ST7796S-SPI-2.4.jpg",width:"500px"})}),"\n",(0,o.jsx)(t.h2,{id:"technical-features",children:"Technical Features"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"SPI Communication:"})," Utilizes MicroPython\u2019s SPI interface for fast and efficient data transfer."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Flexible Color Configuration:"})," Adjusts gamma correction, brightness, and supports multiple color modes."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Rotation Options:"})," Provides text rotation functionality at 0\xb0, 90\xb0, 180\xb0, and 270\xb0."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Memory & Performance Optimizations:"})," Tailored for microcontrollers to ensure smooth display updates without overwhelming system resources."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"hardware-and-software-details",children:"Hardware and Software Details"}),"\n",(0,o.jsx)(t.p,{children:"A TFT (Thin Film Transistor) display leverages active-matrix technology, employing TFTs to switch pixels with precision. Although TFT displays are a type of LCD, they stand out for using TFT technology for improved pixel control and image quality."}),"\n",(0,o.jsx)(t.h3,{id:"hardware-requirements",children:"Hardware Requirements"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Power Supply:"})," Ensure a stable and adequate power supply; TFT displays may draw significant current."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Connection Setup:"})," Verify all connections (SPI SCK, MOSI, CS, DC, and RST) for proper signal integrity."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"initialization-and-calibration",children:"Initialization and Calibration"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Pre-Initialization:"})," Always configure the display before transmitting graphics or text commands; initialize the SPI bus with an appropriate baud rate."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Software Calibration:"})," Experiment with background colors and gamma settings to optimize contrast and brightness."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"example-code",children:"Example Code"}),"\n",(0,o.jsx)(t.p,{children:"Below is an example demonstrating how to initialize the display, render text with various rotations, and apply custom background colors:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'"""ILI9341 demo (fonts 8x8).\n   This example initializes SPI communication and configures display parameters\n   to showcase text rendering with rotations and background colors.\n"""\n\nfrom time import sleep\nfrom ili9341 import Display, color565  # Convert RGB to 16-bit color format\nfrom machine import Pin, SPI          # Hardware control functions\n\ndef test():\n    """Demonstrates text rendering with different rotations and backgrounds."""\n    \n    # Initialize SPI communication for the ST7789V module.\n    spi = SPI(1, baudrate=40000000, sck=Pin(14), mosi=Pin(13))\n    \n    # Setup display with Data/Command, Chip Select, and Reset pins.\n    display = Display(spi, dc=Pin(4), cs=Pin(16), rst=Pin(17))\n\n    # Compute center coordinates of the display.\n    x_center = display.width // 2\n    y_center = display.height // 2\n\n    # Draw primary text elements.\n    display.draw_text8x8(0, 0, \'Built-in\', color565(255, 0, 255))\n    display.draw_text8x8(16, 16, \'MicroPython\', color565(255, 255, 0))\n    display.draw_text8x8(32, 32, \'8x8 Font\', color565(0, 0, 255))\n    \n    # Render text with various rotations.\n    display.draw_text8x8(x_center - 40, 120, "Rotate = 0", color565(0, 255, 0))\n    display.draw_text8x8(0, y_center - 44, "Rotate = 90", color565(255, 0, 0), rotate=90)\n    display.draw_text8x8(x_center - 48, display.height - 9, "Rotate = 180", color565(0, 255, 255), rotate=180)\n    display.draw_text8x8(display.width - 9, y_center - 48, "Rotate = 270", color565(255, 255, 255), rotate=270)\n\n    # Enhanced example with background colors.\n    display.draw_text8x8(x_center - 40, 140, "Rotate = 0", color565(0, 255, 0),\n                         background=color565(255, 0, 0))\n    display.draw_text8x8(20, y_center - 44, "Rotate = 90", color565(255, 0, 0),\n                         rotate=90, background=color565(0, 255, 0))\n    display.draw_text8x8(x_center - 48, display.height - 29, "Rotate = 180", color565(0, 255, 255),\n                         rotate=180, background=color565(0, 0, 255))\n    display.draw_text8x8(display.width - 29, y_center - 48, "Rotate = 270", color565(255, 255, 255),\n                         rotate=270, background=color565(255, 0, 255))\n\n    # Allow some time for observation before cleanup.\n    sleep(15)\n    display.cleanup()  # Reset the display and free resources.\n\ntest()\n'})}),"\n",(0,o.jsx)(t.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Library Repository:"})," View the ",(0,o.jsx)(t.a,{href:"https://github.com/UNIT-Electronics-MX/TFT-Display-ST7789V-2.4/blob/master/ili9341.py",title:"MicroPython-ST7789V_TFT",children:"MicroPython-ST7789V_TFT repository"})," for further details and source code."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Font Creation Tool:"})," Fonts were generated using the free ",(0,o.jsx)(t.a,{href:"https://www.mikroe.com/glcd-font-creator",title:"GLCD Font Creator",children:"GLCD Font Creator"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"The original library was modified to fit the colors configuration of this screen.\nThe tool for displaying images does not show the correct color gamma."})}),"\n",(0,o.jsx)(t.p,{children:"For more demonstrations, view the YouTube tutorial below"}),"\n",(0,o.jsxs)("div",{style:{textAlign:"center"},children:[(0,o.jsx)("a",{href:"https://www.youtube.com/watch?v=NJuOkSSfgUQ",title:"ILI9341 Tutorial",children:(0,o.jsx)("img",{src:"https://i.ytimg.com/vi/NJuOkSSfgUQ/maxresdefault.jpg",alt:"Watch the ILI9341 Tutorial",style:{maxWidth:"60%",height:"auto"}})}),(0,o.jsx)("p",{children:"Watch this mini tutorial for a quick overview on setting up the ILI9341 and ST7789V displays with MicroPython."})]}),"\n",(0,o.jsx)(t.p,{children:"This comprehensive documentation offers a step-by-step guide to setting up and utilizing the TFT ST7789V display with MicroPython."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>s});var n=i(6540);const o={},r=n.createContext(o);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);