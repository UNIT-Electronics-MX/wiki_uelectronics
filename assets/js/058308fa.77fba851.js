"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3454],{8453:(e,r,i)=>{i.d(r,{R:()=>t,x:()=>o});var n=i(6540);const s={},l=n.createContext(s);function t(e){const r=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),n.createElement(l.Provider,{value:r},e.children)}},8949:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Development_boards/devlab/multiprotocol","title":"Multi-Protocol Programmer","description":"Supports AVR, ARM (CMSIS-DAP), and CPLD (MAX II)","source":"@site/docs/Development_boards/devlab/multiprotocol.md","sourceDirName":"Development_boards/devlab","slug":"/Development_boards/devlab/multiprotocol","permalink":"/wiki_uelectronics/docs/Development_boards/devlab/multiprotocol","draft":false,"unlisted":false,"editUrl":"https://github.com/UNIT-Electronics/docs/Development_boards/devlab/multiprotocol.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"DevLab development boards","permalink":"/wiki_uelectronics/docs/category/devlab-development-boards"},"next":{"title":"Cocket Nova","permalink":"/wiki_uelectronics/docs/Development_boards/devlab/cocket_nova"}}');var s=i(4848),l=i(8453);const t={sidebar_position:1},o="Multi-Protocol Programmer",d={},c=[{value:"Hardware Overview",id:"hardware-overview",level:2},{value:"Firmware Profiles",id:"firmware-profiles",level:2},{value:"AVR Programmer Firmware",id:"avr-programmer-firmware",level:3},{value:"CMSIS-DAP Debugger Firmware (picoDAP)",id:"cmsis-dap-debugger-firmware-picodap",level:3},{value:"CPLD Programmer Firmware (JTAG, Quartus-Compatible)",id:"cpld-programmer-firmware-jtag-quartus-compatible",level:3},{value:"Toolchain &amp; Flashing",id:"toolchain--flashing",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Flashing Firmware (Linux/Windows/macOS)",id:"flashing-firmware-linuxwindowsmacos",level:3},{value:"Bootloader Mode (CH552)",id:"bootloader-mode-ch552",level:2},{value:"Summary of Firmware Capabilities",id:"summary-of-firmware-capabilities",level:2},{value:"\ud83e\udeaa License",id:"-license",level:2}];function a(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"multi-protocol-programmer",children:"Multi-Protocol Programmer"})}),"\n",(0,s.jsxs)("div",{style:{textAlign:"center"},children:[(0,s.jsx)("a",{href:"#",children:(0,s.jsx)("img",{src:"https://img.shields.io/badge/version-1.0-blue.svg",alt:"Version"})}),(0,s.jsx)("a",{href:"#",children:(0,s.jsx)("img",{src:"https://img.shields.io/badge/language-Python-lightgrey.svg",alt:"Language"})}),(0,s.jsx)("a",{href:"#",children:(0,s.jsx)("img",{src:"https://img.shields.io/badge/language-C-lightgrey.svg",alt:"Language"})}),(0,s.jsx)("a",{href:"#",children:(0,s.jsx)("img",{src:"https://img.shields.io/badge/license-MIT-green.svg",alt:"License"})}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)("div",{style:{textAlign:"center"},children:[(0,s.jsx)("p",{href:"./docs/unit_product_brief.pdf",children:(0,s.jsx)("img",{src:"https://raw.githubusercontent.com/UNIT-Electronics-MX/unit_ch552_multiprotocol_programmer/refs/heads/main/hardware/resources/programmer.png",width:"500px"})}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Supports AVR, ARM (CMSIS-DAP), and CPLD (MAX II)"})}),"\n",(0,s.jsxs)(r.p,{children:["This project provides firmware for a USB-based programmer built on the ",(0,s.jsx)(r.strong,{children:"CH552 microcontroller"}),", supporting multiple programming targets and protocols, including ",(0,s.jsx)(r.strong,{children:"AVR"}),", ",(0,s.jsx)(r.strong,{children:"ARM Cortex-M"}),", and ",(0,s.jsx)(r.strong,{children:"CPLD"})," devices. The device includes ",(0,s.jsx)(r.strong,{children:"target voltage selection (3.3V / 5V)"})," and can be configured with different firmware to suit specific microcontroller families."]}),"\n",(0,s.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Topic"}),(0,s.jsx)("th",{children:"Link"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Multi-Protocol Programmer"}),(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"https://unit-electronics-mx.github.io/unit_multiprotocol_programmer_platform/",target:"_blank",children:(0,s.jsx)(r.p,{children:"Multi-Protocol Programmer"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Getting Started"}),(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"https://unit-electronics-mx.github.io/unit_ch552_multiprotocol_programmer/index.html",target:"_blank",children:(0,s.jsx)(r.p,{children:"Getting Started"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Schematic Design"}),(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"https://github.com/UNIT-Electronics-MX/unit_ch552_multiprotocol_programmer/blob/main/hardware/unit_sch_V_0_0_1_ue0090_CH552_USB_Multi-Protocol-Programmer.pdf",target:"_blank",children:(0,s.jsx)(r.p,{children:"Schematic Design"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"PCB Design"}),(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"https://github.com/UNIT-Electronics-MX/unit_ch552_multiprotocol_programmer/tree/main/hardware",target:"_blank",children:(0,s.jsx)(r.p,{children:"PCB Design"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Firmware Development"}),(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"https://github.com/UNIT-Electronics-MX/unit_ch552_multiprotocol_programmer/tree/main/software/PICO-DAP",target:"_blank",children:(0,s.jsx)(r.p,{children:"Firmware Development"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Testing and Debugging"}),(0,s.jsx)("td",{children:(0,s.jsx)("a",{href:"https://github.com/UNIT-Electronics-MX/unit_ch55x_docker_sdk",target:"_blank",children:(0,s.jsx)(r.p,{children:"Testing and Debugging"})})})]})]})]})}),"\n",(0,s.jsx)(r.h2,{id:"hardware-overview",children:"Hardware Overview"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Microcontroller: ",(0,s.jsx)(r.strong,{children:"CH552G / CH552E / CH552P"})]}),"\n",(0,s.jsx)(r.li,{children:"USB Full-Speed Interface (CDC / HID depending on firmware)"}),"\n",(0,s.jsxs)(r.li,{children:["Voltage Selector: ",(0,s.jsx)(r.strong,{children:"3.3V / 5V"})," target supply switch"]}),"\n",(0,s.jsxs)(r.li,{children:["Programmable firmware profiles:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"AVR Programmer"})," (USBasp or Serial UPDI)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"ARM CMSIS-DAP Debugger"})," (picoDAP firmware)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"CPLD JTAG Programmer"})," (Quartus-compatible)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"firmware-profiles",children:"Firmware Profiles"}),"\n",(0,s.jsx)(r.h3,{id:"avr-programmer-firmware",children:"AVR Programmer Firmware"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Protocols:"})," USBasp, SerialUPDI"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Target Devices:"})," ATmega, ATtiny, and other AVR MCUs"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"USB Interface:"})," libusb-compatible"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Tool Compatibility:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"avrdude"})}),"\n",(0,s.jsx)(r.li,{children:"PlatformIO"}),"\n",(0,s.jsx)(r.li,{children:"Windows (Zadig/libusb)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Voltage:"})," Selectable 3.3V or 5V"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Build Options:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Compile with ",(0,s.jsx)(r.a,{href:"https://sdcc.sourceforge.net/",children:"SDCC"})]}),"\n",(0,s.jsxs)(r.li,{children:["Or flash precompiled binaries using ",(0,s.jsx)(r.code,{children:"tools/chprog.py"})]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"USBasp mode enumerates as USB HID device; Serial UPDI uses CDC port."})}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cmsis-dap-debugger-firmware-picodap",children:"CMSIS-DAP Debugger Firmware (picoDAP)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Protocols:"})," SWD, JTAG (CMSIS-DAP)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Target Devices:"})," ARM Cortex-M (e.g., STM32, SAM, nRF52)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Tool Compatibility:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"http://openocd.org/",children:"OpenOCD"})}),"\n",(0,s.jsx)(r.li,{children:"PyOCD"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"USB Interface:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"CMSIS-DAP via HID"}),"\n",(0,s.jsx)(r.li,{children:"CDC UART (optional, for logging or VCP)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Drivers:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Linux/macOS: Native"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"Device appears as HID with optional serial COM port."})}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cpld-programmer-firmware-jtag-quartus-compatible",children:"CPLD Programmer Firmware (JTAG, Quartus-Compatible)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Target Devices:"})," Intel/Altera ",(0,s.jsx)(r.strong,{children:"MAX II (e.g., EPM240)"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Protocol:"})," JTAG via USB-Blaster protocol"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Tool Compatibility:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Intel Quartus Programmer (via USB-Blaster emulation)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"USB VID/PID Options:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Safe distribution mode (default): ",(0,s.jsx)(r.code,{children:"0x16C0:0x05DC"})]}),"\n",(0,s.jsxs)(r.li,{children:["Compatibility mode: ",(0,s.jsx)(r.code,{children:"0x09FB:0x6001"})," ",(0,s.jsx)(r.em,{children:"(for full Quartus support)"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Voltage Selection:"})," 3.3V / 5V via hardware switch"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Build System:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Compile with SDCC"}),"\n",(0,s.jsxs)(r.li,{children:["Flash via WCH bootloader or ",(0,s.jsx)(r.code,{children:"chprog.py"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"toolchain--flashing",children:"Toolchain & Flashing"}),"\n",(0,s.jsx)(r.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://sdcc.sourceforge.net/",children:"SDCC Compiler"})}),"\n",(0,s.jsxs)(r.li,{children:["Python 3 with ",(0,s.jsx)(r.a,{href:"https://github.com/pyusb/pyusb",children:(0,s.jsx)(r.code,{children:"pyusb"})})]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"sudo apt install build-essential sdcc python3 python3-pip\npip3 install pyusb\n"})}),"\n",(0,s.jsx)(r.h3,{id:"flashing-firmware-linuxwindowsmacos",children:"Flashing Firmware (Linux/Windows/macOS)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# For bootloader mode\npython3 tools/chprog.py <firmware.bin>\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Or use ",(0,s.jsx)(r.strong,{children:"WCHISPTool"})," for Windows."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"bootloader-mode-ch552",children:"Bootloader Mode (CH552)"}),"\n",(0,s.jsx)(r.p,{children:"To enter USB bootloader mode:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Disconnect all power."}),"\n",(0,s.jsxs)(r.li,{children:["Hold ",(0,s.jsx)(r.strong,{children:"BOOT"})," button."]}),"\n",(0,s.jsx)(r.li,{children:"Reconnect USB while holding BOOT."}),"\n",(0,s.jsx)(r.li,{children:"Release button \u2014 the device enters bootloader mode."}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Linux users: set proper udev rules if needed."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'echo \'SUBSYSTEM=="usb", ATTR{idVendor}=="4348", ATTR{idProduct}=="55e0", MODE="666"\' | sudo tee /etc/udev/rules.d/99-ch55x.rules\nsudo udevadm control --reload\nsudo udevadm trigger\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"summary-of-firmware-capabilities",children:"Summary of Firmware Capabilities"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Firmware"}),(0,s.jsx)(r.th,{children:"Protocols"}),(0,s.jsx)(r.th,{children:"Targets"}),(0,s.jsx)(r.th,{children:"USB Mode"}),(0,s.jsx)(r.th,{children:"Tools Supported"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"AVR Programmer"}),(0,s.jsx)(r.td,{children:"USBasp / UPDI"}),(0,s.jsx)(r.td,{children:"AVR (ATmega, ATtiny)"}),(0,s.jsx)(r.td,{children:"CDC / HID"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"avrdude"}),", PlatformIO"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"CMSIS-DAP"}),(0,s.jsx)(r.td,{children:"SWD, JTAG"}),(0,s.jsx)(r.td,{children:"ARM Cortex-M"}),(0,s.jsx)(r.td,{children:"HID + CDC"}),(0,s.jsx)(r.td,{children:"OpenOCD, PyOCD"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"CPLD Programmer"}),(0,s.jsx)(r.td,{children:"JTAG (Blaster)"}),(0,s.jsx)(r.td,{children:"EPM240 / MAX II"}),(0,s.jsx)(r.td,{children:"HID"}),(0,s.jsx)(r.td,{children:"Quartus Programmer"})]})]})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"-license",children:"\ud83e\udeaa License"}),"\n",(0,s.jsxs)(r.p,{children:["This project is licensed under the ",(0,s.jsx)(r.strong,{children:"MIT License"})," or ",(0,s.jsx)(r.strong,{children:"Creative Commons Attribution-ShareAlike 3.0"}),", depending on the firmware base used. Refer to each firmware subproject for license specifics."]})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);