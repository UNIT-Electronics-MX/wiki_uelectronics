"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1172],{7997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Code/npk","title":"RS485 Soil Sensor Library","description":"This MicroPython library allows communication with the RS485 soil sensor to read:","source":"@site/docs/Code/npk.md","sourceDirName":"Code","slug":"/Code/npk","permalink":"/wiki_uelectronics/docs/Code/npk","draft":false,"unlisted":false,"editUrl":"https://github.com/UNIT-Electronics/docs/Code/npk.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"TFT ST7789V - MicroPython Library Documentation","permalink":"/wiki_uelectronics/docs/Code/tft_st7789v"},"next":{"title":"UNIT - Development boards","permalink":"/wiki_uelectronics/docs/category/unit---development-boards"}}');var i=s(4848),t=s(8453);const o={sidebar_position:2},l="RS485 Soil Sensor Library",d={},a=[{value:"Features",id:"features",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Example",id:"example",level:3},{value:"Using ampy to transfer files to ESP32",id:"using-ampy-to-transfer-files-to-esp32",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rs485-soil-sensor-library",children:"RS485 Soil Sensor Library"})}),"\n",(0,i.jsx)(n.p,{children:"This MicroPython library allows communication with the RS485 soil sensor to read:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\ud83c\udf31 Soil Humidity (%)"}),"\n",(0,i.jsx)(n.li,{children:"\ud83c\udf21\ufe0f Temperature (\xb0C)"}),"\n",(0,i.jsx)(n.li,{children:"\u26a1 Electrical Conductivity (EC, \xb5S/cm)"}),"\n",(0,i.jsx)(n.li,{children:"\ud83e\uddea pH Level"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simple integration with MicroPython UART"}),"\n",(0,i.jsx)(n.li,{children:"CRC validation and sensor response handling"}),"\n",(0,i.jsx)(n.li,{children:"Fully open source (GPLv3)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Clone the repository or download the ",(0,i.jsx)(n.code,{children:"modbus_sensor.py"})," file."]}),"\n",(0,i.jsxs)(n.li,{children:["Copy the ",(0,i.jsx)(n.code,{children:"modbus_sensor.py"})," file to your MicroPython device."]}),"\n",(0,i.jsxs)(n.li,{children:["Import the ",(0,i.jsx)(n.code,{children:"ModbusSensor"})," class in your MicroPython script."]}),"\n",(0,i.jsx)(n.li,{children:"Initialize the sensor with the appropriate UART pins and baud rate."}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"get_sensor_data()"})," method to read the sensor values."]}),"\n",(0,i.jsx)(n.li,{children:"Handle the sensor data as needed."}),"\n",(0,i.jsx)(n.li,{children:"Make sure to handle exceptions and errors as needed."}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This library is designed for the ESP32 and may require modifications for other platforms or hardware."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Recommended to use a 5 V ",(0,i.jsx)(n.a,{href:"https://uelectronics.com/producto/convertidor-de-senal-ttl-a-rs485/",children:"RS485 module"})," for compatibility with the ESP32."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from modbusSensor.modbus_sensor import ModbusSensor\nimport time\n\nsensor = ModbusSensor(tx_pin=26, rx_pin=25, baudrate=4800)\n\nwhile True:\n    humidity, temperature, ec, ph = sensor.get_sensor_data()\n    print(f"Humidity: {humidity}% | Temperature: {temperature}\xb0C | EC: {ec} \xb5S/cm | pH: {ph}")\n    time.sleep(1)\n'})}),"\n",(0,i.jsx)(n.h1,{id:"file-transfer-using-ampy",children:"File Transfer using ampy"}),"\n",(0,i.jsx)(n.h2,{id:"using-ampy-to-transfer-files-to-esp32",children:"Using ampy to transfer files to ESP32"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install ampy using pip:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install adafruit-ampy\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Connect your ESP32 to your computer via USB."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ampy to transfer the ",(0,i.jsx)(n.code,{children:"modbus_sensor.py"})," file to the ESP32:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ampy --port /dev/ttyUSB0 put modbus_sensor.py\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"/dev/ttyUSB0"})," with the appropriate port for your system. Remember to check the port using the ",(0,i.jsx)(n.code,{children:"ls /dev/tty*"})," command."]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"After transferring the file, you can access it in your MicroPython environment."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To run the script, you can use the REPL or create a new script that imports ",(0,i.jsx)(n.code,{children:"modbus_sensor"})," and uses it as shown in the example above."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);