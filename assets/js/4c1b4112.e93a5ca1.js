"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5549],{758:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"Modules/lumiknob","title":"Lumiknob Module","description":"The Module Potentiometer Interface SPI MAX7219 32 LED Sequential is a module that allows you to control 32 LEDs sequentially using a potentiometer. The module uses the SPI protocol to communicate with the MAX7219 LED driver, which controls the LEDs. The potentiometer is used to adjust the speed at which the LEDs are lit up.","source":"@site/docs/Modules/lumiknob.md","sourceDirName":"Modules","slug":"/Modules/lumiknob","permalink":"/wiki_uelectronics/docs/Modules/lumiknob","draft":false,"unlisted":false,"editUrl":"https://github.com/UNIT-Electronics/docs/Modules/lumiknob.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"LiPo Charger Boost & I2C Monitor","permalink":"/wiki_uelectronics/docs/Modules/lipo_module"},"next":{"title":"UNIT - Accessories","permalink":"/wiki_uelectronics/docs/category/unit---accessories"}}');var i=o(4848),s=o(8453);const l={sidebar_position:3},r="Lumiknob Module",d={},a=[{value:"Sequential LED Control",id:"sequential-led-control",level:2},{value:"How to Use",id:"how-to-use",level:2},{value:"Tested Boards",id:"tested-boards",level:2},{value:"Example Code",id:"example-code",level:2},{value:"Results",id:"results",level:2},{value:"License",id:"license",level:2}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"lumiknob-module",children:"Lumiknob Module"})}),"\n",(0,i.jsx)(t.p,{children:"The Module Potentiometer Interface SPI MAX7219 32 LED Sequential is a module that allows you to control 32 LEDs sequentially using a potentiometer. The module uses the SPI protocol to communicate with the MAX7219 LED driver, which controls the LEDs. The potentiometer is used to adjust the speed at which the LEDs are lit up."}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Board in Development"}),": The Lumiknob Module is currently in development. The information provided here is subject to change as the design progresses."]})}),"\n",(0,i.jsx)(t.h2,{id:"sequential-led-control",children:"Sequential LED Control"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Sequential LED Control",src:o(6526).A+"",width:"444",height:"243"})}),"\n",(0,i.jsx)(t.h2,{id:"how-to-use",children:"How to Use"}),"\n",(0,i.jsxs)(t.p,{children:["To use the module, you will need to connect the Potentiometer and the MAX7219 LED driver to your microcontroller. The Potentiometer should be connected to an analog input pin on your microcontroller, and the MAX7219 should be connected to the SPI pins on your microcontroller. You will also need to include the ",(0,i.jsx)(t.code,{children:"max7219.py"})," and ",(0,i.jsx)(t.code,{children:"main.py"})," files in your project."]}),"\n",(0,i.jsx)(t.h2,{id:"tested-boards",children:"Tested Boards"}),"\n",(0,i.jsx)(t.p,{children:"The following table lists the microcontroller boards that have been tested with this module:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Board"}),(0,i.jsx)(t.th,{children:"Status"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Arduino Uno"}),(0,i.jsx)(t.td,{children:"No Tested"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Raspberry Pi Pico"}),(0,i.jsx)(t.td,{children:"No Tested"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ESP32C3 SuperMini"}),(0,i.jsx)(t.td,{children:"Tested and Works"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"example-code",children:"Example Code"}),"\n",(0,i.jsx)(t.p,{children:"The following is an example code that illustrates the use of the module with an ESP32C3 SuperMini board:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"\nimport max7219\nfrom machine import Pin, SPI, ADC\nimport time\n\nspi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(4), mosi=Pin(6))\ncs = Pin(7, Pin.OUT)\ndisplay = max7219.Matrix8x8(spi, cs, 1)\n\ndisplay.brightness(10)\n\npot = ADC(Pin(0))\npot.atten(ADC.ATTN_11DB)\n\ndisplay.fill(0)\ndisplay.show()\n\nwhile True:\n    pot_value = pot.read()\n    num_leds = int((pot_value / 4095) * 32)\n\n    display.fill(0)\n\n    led_count = 0\n    for row in range(8):\n        for col in range(8):\n            if led_count < num_leds:\n                display.pixel(col, row, 1)\n                led_count += 1\n            else:\n                break\n\n    display.show()\n    time.sleep(0.1)\n"})}),"\n",(0,i.jsx)(t.p,{children:"This code reads the potentiometer's value and subsequently determines the quantity of LEDs to illuminate. The LEDs glow sequentially, row by row, from left to right. The potentiometer controls the intensity of the LED illumination."}),"\n",(0,i.jsx)(t.h2,{id:"results",children:"Results"}),"\n",(0,i.jsx)(t.p,{children:"The subsequent GIF image of the module operates as expected and facilitates the sequential control of 32 LEDs with a potentiometer. The potentiometer regulates the illumination rate of the LEDs sequentially, from left to right, row by row. The module is intuitive and can be effortlessly incorporated into your apps."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Sequential LED Control",src:o(7601).A+"",width:"360",height:"640"})}),"\n",(0,i.jsx)(t.h2,{id:"license",children:"License"}),"\n",(0,i.jsxs)(t.p,{children:["This module is released under the MIT License. You are free to use, modify, and distribute this code as you see fit. See the ",(0,i.jsx)(t.code,{children:"LICENSE"})," file for more information."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},7601:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/resized_output-dfa8a43388c50995709174259a9365c9.gif"},6526:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/schematic-b76a5ea02bf6b9d395bccec358dbe36f.PNG"},8453:(e,t,o)=>{o.d(t,{R:()=>l,x:()=>r});var n=o(6540);const i={},s=n.createContext(i);function l(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);