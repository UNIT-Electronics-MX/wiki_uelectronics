"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4483],{8469:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"UNIT-MATTER","metadata":{"permalink":"/wiki_uelectronics/es/blog/UNIT-MATTER","editUrl":"https://github.com/UNIT-Electronics/blog/2025-01-16-UNIT-MATTER.md","source":"@site/i18n/es/docusaurus-plugin-content-blog/2025-01-16-UNIT-MATTER.md","title":"L\xednea Matter IoT","description":"L\xednea UNIT Matter IoT implentando ESP32C6.","date":"2025-01-16T00:00:00.000Z","tags":[{"inline":false,"label":"Matter","permalink":"/wiki_uelectronics/es/blog/tags/matter","description":"Matter tag description"},{"inline":false,"label":"ESP32","permalink":"/wiki_uelectronics/es/blog/tags/esp32","description":"ESP32 tag description"}],"readingTime":1.3,"hasTruncateMarker":true,"authors":[{"name":"Cesar Bautista","title":"Embedded Software Engineer","github":"Cesarbautista10","url":"https://github.com/Cesarbautista10","imageURL":"/wiki_uelectronics/es/img/unnamed.png","key":"cesar","page":null}],"frontMatter":{"slug":"UNIT-MATTER","title":"L\xednea Matter IoT","authors":"cesar","tags":["matter","esp32"]},"unlisted":false,"nextItem":{"title":"Espressif IDF","permalink":"/wiki_uelectronics/es/blog/Tutorial-Espressif"}},"content":":::tip\\nL\xednea UNIT Matter IoT implentando ESP32C6.\\n:::\\n\x3c!-- truncate --\x3e\\n\\n\\n## Introducci\xf3n\\n\\nLa l\xednea **UNIT Matter IoT** es una serie de placas de desarrollo basadas en el microcontrolador **ESP32-C6**. El ESP32-C6 es un circuito integrado que re\xfane los principales sistemas electr\xf3nicos (SoC), integrando altamente Wi-Fi 6 (802.11ax) y Bluetooth Low Energy (BLE) con doble n\xfacleo CPU, dise\xf1ado para aplicaciones IoT. La l\xednea Matter de placas IoT est\xe1n dise\xf1adas para proporcionar soluciones simples con una **relaci\xf3n costo - efectividad** para el desarrollo de dispositivos IoT compatibles con el protocolo Matter.\\n\\nLa conectividad Matter es un nuevo est\xe1ndar de c\xf3digo abierto para dispositivos inteligentes para el hogar, desarrollado por Connectivity Standards Alliance (CSA). Tiene como objetivo unificar y asegurar una forma de comunicaci\xf3n entre dispositivos inteligentes sin importar el fabricante o el protocolo de comunicaci\xf3n. El **protocolo Matter** est\xe1 basado en IP y es dise\xf1ado para trabajar sobre redes Wi-Fi, Thread, y Ethernet.\\n\\n\\n## Soluciones Espressif Matter\\n\\n![Solution_architecture](https://docs.espressif.com/projects/esp-matter/en/latest/esp32/_images/solution_architecture.png)\\n\\n\\n## Primeros resultados \\n\\nPara el nuevo desarrollo de una placa de desarrollo, aqu\xed tenemos los primeros resultados del nuevo microcontrolador ESP32-C6. El ESP32-C6 integra altamente Wi-Fi 6 y tecnolog\xeda Bluetooth de bajo consumo en el mismo chip, adem\xe1s, est\xe1 dise\xf1ado con la arquitectura RISC-V que incluye un doblo n\xfacleo CPU con una velocidad de reloj arriba de **160 MHz**. Adem\xe1s, el ESP32-C6 incluye un amplio conjunto de perif\xe9ricos, por ejemplo, **UART**, **SPI**, **I2C**, **I2S**, **PWM**, e interfaces **ADC**, as\xed como un **sensor de temperatura integrado** y un **acelerador de seguridad**."},{"id":"Tutorial-Espressif","metadata":{"permalink":"/wiki_uelectronics/es/blog/Tutorial-Espressif","editUrl":"https://github.com/UNIT-Electronics/blog/2025-01-16-espressif-sdk.md","source":"@site/i18n/es/docusaurus-plugin-content-blog/2025-01-16-espressif-sdk.md","title":"Espressif IDF","description":"Este tutorial te mostrar\xe1 el proceso de como cargar firmware a una placa de desarrollo usando Espressif IDF.","date":"2025-01-16T00:00:00.000Z","tags":[{"inline":false,"label":"Flash","permalink":"/wiki_uelectronics/es/blog/tags/flash","description":"Programming microcontrollers tag description"},{"inline":false,"label":"Target","permalink":"/wiki_uelectronics/es/blog/tags/target","description":"Target"}],"readingTime":0.49,"hasTruncateMarker":true,"authors":[{"name":"Adrian","title":"Team Lead Hardware Design Engineer","github":"Adrian Rabadan Ortiz","url":"https://github.com/ARabadann","key":"adrian","page":null}],"frontMatter":{"slug":"Tutorial-Espressif","title":"Espressif IDF","authors":"adrian","tags":["flash","target"]},"unlisted":false,"prevItem":{"title":"L\xednea Matter IoT","permalink":"/wiki_uelectronics/es/blog/UNIT-MATTER"},"nextItem":{"title":"OpenOCD","permalink":"/wiki_uelectronics/es/blog/Tutorial-OpenOCD"}},"content":"Este tutorial te mostrar\xe1 el proceso de como cargar firmware a una placa de desarrollo usando Espressif IDF.\\n\\n\x3c!-- truncate --\x3e\\n\\n\\n## Introducci\xf3n\\n\\nEspressif IDF (Entorno de Desarrollo IoT) es el entorno oficial de desarrollo para la serie de microcontroladores ESP32 y ESP32-S. Proporciona un conjunto de herramientas. librer\xedas, y APIs para el desarrollo de aplicaciones en microcontroladores de Espressif con conectividad a Wi-Fi y Bluetooth. Espressif IDF est\xe1 basado en FreeRTOS (sistema operativo en tiempo real (RTOS) de c\xf3digo abierto para dispositivos embebidos) que convierte al entorno de desarrollo en un poderoso ambiente permitiendo flexibilidad en diferentes aplicaciones."},{"id":"Tutorial-OpenOCD","metadata":{"permalink":"/wiki_uelectronics/es/blog/Tutorial-OpenOCD","editUrl":"https://github.com/UNIT-Electronics/blog/2025-01-16-openocd.md","source":"@site/i18n/es/docusaurus-plugin-content-blog/2025-01-16-openocd.md","title":"OpenOCD","description":"Este tutorial te guiar\xe1 paso a paso para cargar firmware a una placa de desarrollo usando OpenOCD.","date":"2025-01-16T00:00:00.000Z","tags":[{"inline":false,"label":"Flash","permalink":"/wiki_uelectronics/es/blog/tags/flash","description":"Programming microcontrollers tag description"}],"readingTime":1.09,"hasTruncateMarker":true,"authors":[{"name":"Cesar Bautista","title":"Embedded Software Engineer","github":"Cesarbautista10","url":"https://github.com/Cesarbautista10","imageURL":"/wiki_uelectronics/es/img/unnamed.png","key":"cesar","page":null}],"frontMatter":{"slug":"Tutorial-OpenOCD","title":"OpenOCD","authors":"cesar","tags":["flash"]},"unlisted":false,"prevItem":{"title":"Espressif IDF","permalink":"/wiki_uelectronics/es/blog/Tutorial-Espressif"},"nextItem":{"title":"Welcome to Wiki Unit Electronics","permalink":"/wiki_uelectronics/es/blog/lauch"}},"content":"Este tutorial te guiar\xe1 paso a paso para cargar firmware a una placa de desarrollo usando OpenOCD.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducci\xf3n\\n\\nOpenOCD (Depurador de Chip en c\xf3digo abierto) es un **software de c\xf3digo abierto** que proporciona un depurador y programaci\xf3n para sistemas embebidos. Soporta un amplio cat\xe1logo de interfaces y dispositivos, creando una herramienta vers\xe1til para el desarrollo embebido.\\n\\nEn este tutorial, se usar\xe1 OpenOCD para cargar firmware a una placa de desarrollo. Se cubrir\xe1 la instalaci\xf3n de OpenOCD, configuraci\xf3n del dispositivo a trabajar y la grabaci\xf3n de firmware en el mismo.\\n\\n## Requisitos\\n\\n> **Antes de empezar, aseg\xfarate de tener lo siguiente:**\\n\\n- Una **placa de desarrollo** con una interfaz apropiada (ej. JTAG, SWD).\\n- Un **archivo de firmware** con formato compatible (ej. ELF, HEX).\\n- Una computadora con **OpenOCD instalado**.\\n\\n\\n\\n## Instalaci\xf3n\\n\\nPara instalar OpenOCD, sigue las siguientes instrucciones seg\xfan tu sistema operativo: \\n\\n- **Linux**: OpenOCD est\xe1 disponible para la mayor\xeda de gestores de paquetes. Tu puedes instalarlo con el siguiente comando:\\n\\n  ```bash\\n  sudo apt-get install openocd\\n  ```\\n\\n- **Windows**: Descarga la \xfaltima versi\xf3n de OpenOCD en su [sitio web oficial.](https://openocd.org/)\\n\\n- **macOS**: OpenOCD puede se instalado usando [Homebrew](https://brew.sh/). Ejecuta el siguiente comando:\\n\\n  ```bash\\n  brew install openocd\\n  ```\\n\\nUna vez instalado OpenOCD, puedes verificar la instalaci\xf3n ejecutando el siguiente comando:\\n\\n```bash\\nopenocd --version\\n```\\n\\nDeber\xedas ver el n\xfamero de versi\xf3n de OpenOCD en tu terminal."},{"id":"lauch","metadata":{"permalink":"/wiki_uelectronics/es/blog/lauch","editUrl":"https://github.com/UNIT-Electronics/blog/2024-01-17-launch/index.md","source":"@site/blog/2024-01-17-launch/index.md","title":"Welcome to Wiki Unit Electronics","description":"wiki unit electronics","date":"2024-01-17T00:00:00.000Z","tags":[{"inline":false,"label":"ESP32","permalink":"/wiki_uelectronics/es/blog/tags/esp32","description":"ESP32 tag description"},{"inline":false,"label":"Hello","permalink":"/wiki_uelectronics/es/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/wiki_uelectronics/es/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.5,"hasTruncateMarker":true,"authors":[{"name":"Adrian","title":"Team Lead Hardware Design Engineer","github":"Adrian Rabadan Ortiz","url":"https://github.com/ARabadann","key":"adrian","page":null},{"name":"Cesar Bautista","title":"Embedded Software Engineer","github":"Cesarbautista10","url":"https://github.com/Cesarbautista10","imageURL":"/wiki_uelectronics/es/img/unnamed.png","key":"cesar","page":null}],"frontMatter":{"slug":"lauch","title":"Welcome to Wiki Unit Electronics","authors":["adrian","cesar"],"tags":["esp32","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"OpenOCD","permalink":"/wiki_uelectronics/es/blog/Tutorial-OpenOCD"}},"content":":::tip\\nwiki unit electronics\\n:::\\n\\n\\n\x3c!-- truncate --\x3e\\n\\n# Wiki Unit Electronics\\n\\n## Introduction\\n\\n\\nWelcome to Wiki Unit Electronics, a place where you can find all the information you need to start working with our products. We are a company that is dedicated to the development of electronic products and we are always looking for new ways to improve our products and services. We are constantly updating our website with new information and resources to help you get started with our products. If you have any questions or need help with anything, please feel free to contact us. We are always happy to help."}]}}')}}]);