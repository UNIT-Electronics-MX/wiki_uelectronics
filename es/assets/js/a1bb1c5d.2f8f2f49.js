"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[598],{750:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Modules/haptic_motor_driver","title":"M\xf3dulo Controlador de Motor H\xe1ptico","description":"El M\xf3dulo Controlador de Motor H\xe1ptico es un m\xf3dulo que se puede utilizar para accionar un motor h\xe1ptico. El m\xf3dulo se basa en el IC controlador de motor h\xe1ptico DRV2605L. El DRV2605L es un controlador h\xe1ptico vers\xe1til que se puede utilizar para accionar un actuador resonante lineal (LRA) o un motor de masa exc\xe9ntrica rotativa (ERM), proporcionando una amplia gama de efectos h\xe1pticos. El m\xf3dulo est\xe1 dise\xf1ado para usarse con conectores compatibles STEMMA QT y conectores qwiic.","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/Modules/haptic_motor_driver.md","sourceDirName":"Modules","slug":"/Modules/haptic_motor_driver","permalink":"/wiki_uelectronics/es/docs/Modules/haptic_motor_driver","draft":false,"unlisted":false,"editUrl":"https://github.com/UNIT-Electronics/docs/Modules/haptic_motor_driver.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"UNIT - Modules","permalink":"/wiki_uelectronics/es/docs/category/unit---modules"},"next":{"title":"Cargador LiPo Boost y Monitor I2C","permalink":"/wiki_uelectronics/es/docs/Modules/lipo_module"}}');var r=n(4848),t=n(8453);const a={sidebar_position:1},s="M\xf3dulo Controlador de Motor H\xe1ptico",c={},l=[{value:"Ejemplo de C\xf3digo",id:"ejemplo-de-c\xf3digo",level:2},{value:"Primeros Pasos",id:"primeros-pasos",level:2},{value:"Usando el M\xf3dulo con <strong>Cocket Nova</strong>",id:"usando-el-m\xf3dulo-con-cocket-nova",level:3},{value:"Usando el M\xf3dulo con <strong>ESP32 y MicroPython</strong>",id:"usando-el-m\xf3dulo-con-esp32-y-micropython",level:3},{value:"Licencias",id:"licencias",level:2}];function d(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"m\xf3dulo-controlador-de-motor-h\xe1ptico",children:"M\xf3dulo Controlador de Motor H\xe1ptico"})}),"\n",(0,r.jsx)(o.p,{children:"El M\xf3dulo Controlador de Motor H\xe1ptico es un m\xf3dulo que se puede utilizar para accionar un motor h\xe1ptico. El m\xf3dulo se basa en el IC controlador de motor h\xe1ptico DRV2605L. El DRV2605L es un controlador h\xe1ptico vers\xe1til que se puede utilizar para accionar un actuador resonante lineal (LRA) o un motor de masa exc\xe9ntrica rotativa (ERM), proporcionando una amplia gama de efectos h\xe1pticos. El m\xf3dulo est\xe1 dise\xf1ado para usarse con conectores compatibles STEMMA QT y conectores qwiic."}),"\n",(0,r.jsxs)("div",{style:{textAlign:"center"},children:[(0,r.jsx)("img",{src:"https://raw.githubusercontent.com/UNIT-Electronics/UNIT_DRV2605L_Haptic_Motor_Driver/refs/heads/main/Resources/drv2605l.jpg",width:"300px"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(o.h2,{id:"ejemplo-de-c\xf3digo",children:"Ejemplo de C\xf3digo"}),"\n",(0,r.jsxs)(o.admonition,{type:"note",children:[(0,r.jsx)(o.mdxAdmonitionTitle,{}),(0,r.jsxs)(o.p,{children:["El siguiente ejemplo es solo demostrativo; puedes encontrar m\xe1s ejemplos en el ",(0,r.jsx)(o.a,{href:"https://github.com/UNIT-Electronics/UNIT_DRV2605L_Haptic_Motor_Driver/tree/main/Software",children:"Repositorio GitHub DRV2605L"})]})]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-python",children:'from machine import I2C, Pin\nimport time\n\n# Inicializar I2C\ni2c = I2C(0, scl=Pin(13), sda=Pin(12))  # Usa los pines apropiados para tu placa, por ejemplo RP2040 (Pico)\ndrv = DRV2605L(i2c)\n\n# Ejemplo de uso\nprint("Inicializando DRV2605L...")\ndrv.set_voltage(0x80, 0x90)  # Establece el voltaje para operaci\xf3n a 3.3V\ndrv.select_library(1)        # Utiliza la biblioteca ERM\n\n# Ejemplo: Efecto de Rampa\nprint("Reproduciendo efecto de rampa...")\ndrv.set_waveform(0, 47)  # Efecto incrementado\ndrv.set_waveform(1, 48)  # Efecto decrementado\ndrv.set_waveform(2, 0)   # Finalizar secuencia\ndrv.go()\ntime.sleep(1)  # Vibra durante 1 segundo\ndrv.stop()\nprint("Efecto de rampa completado.")\n'})}),"\n",(0,r.jsx)(o.h2,{id:"primeros-pasos",children:"Primeros Pasos"}),"\n",(0,r.jsxs)(o.h3,{id:"usando-el-m\xf3dulo-con-cocket-nova",children:["Usando el M\xf3dulo con ",(0,r.jsx)(o.strong,{children:"Cocket Nova"})]}),"\n",(0,r.jsx)(o.p,{children:"El m\xf3dulo es compatible con la placa Cocket Nova utilizando el compilador SDCC. Para comenzar, sigue la documentaci\xf3n oficial para instalar las herramientas y controladores necesarios:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.a,{href:"https://unit-electronics.github.io/CH55x_SDCC_Doc/install_linux.html",children:"Gu\xeda de Inicio de Cocket Nova"})}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:["Ejemplos adicionales est\xe1n disponibles en el ",(0,r.jsx)(o.a,{href:"https://github.com/UNIT-Electronics/CH55x_SDCC_Examples",children:"repositorio CH55X_SDCC_Examples"}),"."]}),"\n",(0,r.jsxs)(o.h3,{id:"usando-el-m\xf3dulo-con-esp32-y-micropython",children:["Usando el M\xf3dulo con ",(0,r.jsx)(o.strong,{children:"ESP32 y MicroPython"})]}),"\n",(0,r.jsx)(o.p,{children:"El m\xf3dulo tambi\xe9n es compatible con la placa de desarrollo DualMCU utilizando MicroPython. Sigue la documentaci\xf3n oficial para configurar el entorno:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.a,{href:"https://unit-electronics.github.io/DualMCU-ONE/env.html#micropython-installation-on-dualmcu",children:"Gu\xeda de Inicio DualMCU ESP32 & RP2040"})}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"licencias",children:"Licencias"}),"\n",(0,r.jsxs)(o.p,{children:["Este proyecto est\xe1 licenciado bajo la Licencia P\xfablica General GNU v3.0 (GPL-3.0) para todo el trabajo original y las modificaciones para Cocket NOVA. Sin embargo, partes del c\xf3digo se basan en ",(0,r.jsx)(o.a,{href:"https://github.com/wagiminator/MCU-Templates",children:"MCU Templates"})," de wagiminator, que est\xe1n licenciados bajo la Licencia Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)."]}),"\n",(0,r.jsx)(o.p,{children:"Para m\xe1s detalles, consulta:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.a,{href:"http://creativecommons.org/licenses/by-sa/3.0/",children:"Licencia CC BY-SA 3.0"})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.a,{href:"https://www.gnu.org/licenses/gpl-3.0.en.html",children:"Licencia GPL-3.0"})}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:"\xa1Este proyecto es de c\xf3digo abierto! Tanto el hardware como el software est\xe1n licenciados bajo la Licencia MIT para MicroPython:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Software:"})," ",(0,r.jsx)(o.a,{href:"https://opensource.org/licenses/MIT",children:"Licencia MIT"})]}),"\n"]})]})}function p(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>s});var i=n(6540);const r={},t=i.createContext(r);function a(e){const o=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:o},e.children)}}}]);